---
layout:     post
title:      "软件工程系列-系统通信"
subtitle:   ""
date:       2017-06-02 12:00:00
author:     "JerryMinds"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 云端
    - 软件工程
    - 系统架构
---

> 非人为触发的行为的管理


#### CQRS（Command Query Responsibility Segregation 命令查询职责分离）
### 重要概念
*  一个命令表示一种意图，表示命令系统做什么修改，命令的执行结果通常不需要返回；一个查询表示向系统查询数据并返回。
*  事件表示命令操作领域中的聚合根，然后聚合根的状态发生变化后产生的事件。
### 前提
由于CQRS架构的一致性模型为最终一致性，所以，你的系统要接受查询到的数据可能不是最新的，而是有几个毫秒的延迟。

### 多种实现
* 最常见的CQRS架构是数据库的读写分离；
* 系统底层存储不分离，但是上层逻辑代码分离；
* 系统底层存储分离，C端采用Event Sourcing的技术，在EventStore中存储事件；Q端存储对象的最新状态，用于提供查询支持；

### 适用场景

我们的应用的写模型和读模型差别比较大时；
* 当我们希望实践DDD时；因为CQRS架构可以让我们实现领域模型不受任何ORM框架带来的对象和数据库的阻抗失衡的影响；
* 当我们希望对系统的查询性能和写入性能分开进行优化时，尤其是读/写比非常高的系统，CQ分离是必须的；
* 当我们希望我们的系统同时满足高并发的写、高并发的读的时候；因为CQRS架构可以做到C端最大化的写，Q端非常方便的提供可扩展的读模型；

### 执行流程
## C端（MVC Controller）发送命令通知系统做修改
1.发送命令到分布式MQ；
2.然后命令的订阅者处理命令；
3.订阅者内部根据不同的命令调用不同的Command Handler进行处理；
4.Command Handler内部根据命令所指定的聚合根ID从In-Memory内存中直接获取聚合根对象的引用，然后操作聚合根对象；
5.聚合根对象状态发生变化并产生事件；
6.框架负责自动持久化事件到Event Storage（简称EventStore）；
7.框架负责将事件发布到Event MQ；
8.Event订阅者订阅事件，然后调用对应的Event Handler进行处理，如更新Data Storage（保存了聚合根的最新状态，通常叫读库，ReadDB）；

## Q端的查询的执行流程
客户端如（MVC Controller）发出查询请求系统返回数据：
1.调用轻薄的Query Service，传如Query DTO；
2.Query Service从读库进行查询并返回结果；

## Saga的由来-解决可能会长时间运行的分布式事务（long-running process）的问题
saga是牺牲了数据的强一致性，仅仅实现了最终一致性，但是提高了系统整体的可用性

![img](/img/in-post/post-sofeware/post-cqrs-sagas.png)

## 高级相关配置

1.一个命令只允许修改一个聚合根
2.命令或事件在分布式MQ的路由根据聚合根ID来路由，也就是同一个聚合根的命令和事件都在一个队列里面
3.引入Command Mailbox，Event Mailbox这两个概念，将聚合根需要处理的命令和产生的事件都队列化，去并发；做到架构上最大的并行，将并发降低到最低；
4.引入Group Commit技术，做到整个C端的架构层面支持批量提交聚合根产生的事件，从而极大的提高C端的整体吞吐量；比如可以实现对同一个聚合根的每秒修改TPS达到5W？这个在传统的架构下是很难做到的。而在这个架构下，框架就可以提供支持。
5.通过引入Saga（不了解的同学可以网上搜一下什么是CQRS Saga）的概念，做到基于事件驱动的最终一致性，大家可以回想一下前面介绍的Node通过Event连接的架构；整个系统的所有节点的交互通过消息来驱动；


DDD分析案例

#### 基本概念
* DDD的角度战略设计(划分子域以及BC)
* 上下文 - 划分领域模型的边界，规定什么应该在领域模型内，什么不应该。
* 上下文元素 - 代码实现，团队成员，数据库，UI等
* adapter(适配器，防腐层) 上下文之间的通信。context-mapping 
* 上下文的分解

#### 上线划分
### 举例会议管理系统
关键业务场景
1.客户创建会议；
2.客户管理会议座位；
3.客户发布会议；
4.预订人预定会议座位；
5.预订人支付订单；
6.预订人填写参会人信息；
7.客户查询会议的订单信息；

1237由客户发起,都与管理会议相关(会议管理上下文)
456预订人三个场景分解为 订单处理上下文，支付上下文

### 领域建模


DDD的关键思想是领域建模，
领域是问题域，
领域建模的结果是领域模型。




