---
layout:     post
title:      "软件工程系列-权限控制"
subtitle:   ""
date:       2017-06-02 12:00:00
author:     "JerryMinds"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 云端
    - 软件工程
    - 权限控制
---

> 用户与可以进行的行为的关联关系（用户，行为，关联关系）


### 概述
权限管理
* 只要用户参与的系统一般都要权限管理,实现对用户访问系统的控制，按照安全规则或者安全策略控制用户可以访问而且只能
访问自己被授权的资源。
权限管理包含用户认证和授权两部分

用户认证
* Subject： 主体，理解为用户,可能是程序，都要去访问系统的资源，系统需要对subject进行身份认证。
* Principal：身份信息，通常是唯一的，一个主体还有多个身份信息，但是都有一个主身份信息（primary principal）
* Credential : 凭证信息，可以是密码 、证书、指纹
总结：主体在进行身份认证时需要提供身份信息和凭证信息。


用户授权 
用户授权，简单理解为访问控制，在用户认证通过后，系统对用户访问资源进行控制，用户具有资源的访问权限方可访问。
授权过程理解为：who对what(which)进行how操作
* who : 主题即subject,subject在认证通过后系统进行访问控制
* what : 资源(Resource)，subject必须具备资源的访问权限才可访问该 
  资源。资源比如：系统用户列表页面、商品修改菜单、商品id为001的商品信息。
BU属于资源类型,相当与Java类，或者一个数据库表对象
具体某个BUID 是资源实例,相关new的JAVA对象，或者一条对象
* how : 权限/许可(permission) ，针对资源的权限或许可，subject具有permission访问资源，如何访问/操作需要定义permission，权限比如：用户添加、用户修改、商品删除。

权限模型:
* User (账号,密码) - Subject
* Resource (资源名称,访问地址,地址类型) BU查看账单,BU
* Permission （权限名称，资源ID）
* Role (角色名称)
* Role2Permission （角色id、权限id）
* Role2User （UserId,角色Id）

为了简化开发可以将 Resource Pemission 合并为一个对象。
简化后的关系见下图
![img](/img/in-post/post-sofeware/role_permission.png)


### 基于角色的访问控制（RBAC Role-Based Access Control）
用户
* 用户是怎么分类的(用户角色)
* 用户与用户之间的关系是什么？

行为
* 怎么将行为进行分类(目的区分，行为业务类别区分，行为与系统的交互类型区分)
* 行为之间是否有层级和依赖关系，是怎么样的依赖关系

关联关系
* 是一对一还是一对多，如果有父子层级之分，是继承关系还是独立存在。
这是概念层的问题，具体到工作的设计当中，用于梳理需求会有一些帮助，主要还是用于梳理基础概念。

问题:
角色针对人划分的，人作为用户在系统中属于活动内容，如果该 角色可以访问的资源出现变更，需要修改你的代码了，比如：需要变更为部门经理和总经理都可以进行用户报表查看，代码变更困难！




### 另外一种RBAC (Resource-Based Access Control)
* Resource 每个URL,菜单,按钮都是Resource这个Resource有对应的Permission
* 角色拥有Permission(若干)
* 有没有对象Permission

资源在系统中是不变的

### 权限控制系统解决方案
* 基于角色的权限控制：根据角色判断是否有操作权限，因为角色的变化性较高，如果角色修改需要修改控制代码，系统可扩展性不强。 
* 基于资源的权限控制：根据资源权限是否有操作权限，因为资源相对固定，如果角色修改或角色中权限修改不需要修改控制代码，使用此方法系统可维护性很强。建议使用。


## 粗粒度权限管理

介绍：对资源类型的权限管理，。资源类型比如：菜单、url连接、用户添加页面、用户信息、类方法、页面中按钮。
实现：粗粒度权限管理比较容易将权限管理的代码抽取出来在系统架构级别统一处理。比如：通过springmvc的拦截器实现授权。
１.使用权限管理架构实现
２.使用URL拦截进行处理










